package blang.distributions

/** Uniform random variable over the contiguous set of integers \(\{m, m+1, \dots, M-1\}\). */
@Samplers(UniformSampler)
model DiscreteUniform {
  random IntVar realization
  
  /** The left point of the set (inclusive). \(m \in (-\infty, M)\) */
  param IntVar minInclusive
  
  /** The right point of the set (exclusive). \(M \in (m, \infty)\) */
  param IntVar maxExclusive
  
  laws {
    logf(minInclusive, maxExclusive) {
      if (maxExclusive - minInclusive <= 0.0) return NEGATIVE_INFINITY
      return -log(maxExclusive - minInclusive)
    }
    logf(realization, minInclusive, maxExclusive) {
      if (minInclusive <= realization &&
      realization < maxExclusive) return 0.0
      else return NEGATIVE_INFINITY
    }
  }
  
  generate(rand) {
    rand.discreteUniform(minInclusive, maxExclusive)
  }
}