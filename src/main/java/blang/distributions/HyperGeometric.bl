package blang.distributions

/** A population of size \(N\), \(K\) of which are marked, and drawing without replacement \(n\) samples from the population; the HyperGeometric models the number in the sample that are marked. */
model HyperGeometric{
	
	random IntVar numberOfSuccess
	
	/** Number sampled. \(n\) */
	param IntVar numberOfDraws
	
	/** Population size. \(N\) */
	param IntVar population
	
	/** Number marked in the population. \(K\) */
	param IntVar populationConditioned
	
	laws{
		logf(populationConditioned, numberOfSuccess){
			if(numberOfSuccess<0) return NEGATIVE_INFINITY
			if(populationConditioned<=0 || numberOfSuccess > populationConditioned) return NEGATIVE_INFINITY
			return logBinomial(populationConditioned,numberOfSuccess)
		}
		logf(population, numberOfDraws){
			if(numberOfDraws<0) return NEGATIVE_INFINITY
			if(population<=0 || numberOfDraws > population) return NEGATIVE_INFINITY
			return -logBinomial(population, numberOfDraws)
		}
		logf(populationConditioned,numberOfSuccess,population,numberOfDraws){
			if(numberOfDraws-numberOfSuccess<0) return NEGATIVE_INFINITY
			if(population-populationConditioned<=0 || numberOfDraws-numberOfSuccess > population-populationConditioned)
		     return NEGATIVE_INFINITY
		     return logBinomial(population-populationConditioned,numberOfDraws-numberOfSuccess)
		}
	}
	generate (rand){
		rand.hyperGeometric(numberOfDraws,population,populationConditioned)
	}
}