package blang.distributions

import briefj.collections.UnorderedPair
import blang.types.Precision
import briefj.Indexer

/** A mean-zero normal, sparse-precision Markov random field. 
 * For small problem, use MultivariateNormal instead, 
 * but for problems with a large, sparse precision matrix, this implementation 
 * allows the user to specify a 'support' 
 * for the precision, outside of which the precision is guaranteed to be zero. This 
 * can speed up sampling considerably.
 */
@Samplers(EllipticalSliceSampler)
model NormalField {
  /** Precision matrix structure.
   * precision.support is assumed to be constant.
   * TODO: add some construct that test this exponentially less and less frequently
   */
  param Precision precision
  random Plated<RealVar> realization
    
  laws {
    for (UnorderedPair pair : precision.support) {
      logf(
        precision,
        pair,
        RealVar x0 = realization.get(precision.plate.index(pair.first)),
        RealVar x1 = realization.get(precision.plate.index(pair.second))
      ) {
        if (pair.first == pair.second) {
          return - 0.5 * precision.get(pair) * x0 * x0
        } else {
          // 0.5 * 2 = 1 (because we iterate over set of unordered pairs)
          return - precision.get(pair) * x0 * x1
        }
      }
    }
    logf(int dim = precision.plate.indices.size) {
      - dim * log(2*PI) / 2.0
    }
    logf(precision) {
      0.5 * precision.logDet
    }
  }
  
  generate (rand) {
    val Precision<Object> p = precision 
    val Indexer<Object> indexer = Precision::indexer(p.plate)
    val Matrix precisionMatrix = Precision::asMatrix(p, indexer)
    val Matrix result = sampleNormalByPrecision(rand, precisionMatrix)
    for (Index<Object> index : p.plate.indices) { 
      (realization.get(index) as WritableRealVar).set(result.get(indexer.o2i(index.key)))
    }
  }
}